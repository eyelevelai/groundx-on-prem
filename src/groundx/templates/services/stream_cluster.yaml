{{- $cc := include "groundx.stream.create" . -}}
{{- if not (eq $cc "false") -}}

{{- $name := include "groundx.stream.serviceName" . -}}
{{- $svc := printf "%s-cluster" $name -}}
{{- $np := printf "%s-dual-role" $name -}}
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaNodePool
metadata:
  name: {{ $np | quote }}
  namespace: {{ include "groundx.ns" . | quote }}
  labels:
    strimzi.io/cluster: {{ $svc }}
{{ include "groundx.renderDefaultLabels" (dict "name" $np "indent" 4 "root" $) }}
spec:
  replicas: {{ .Values.stream.nodepool.replicas }}
  roles:
    - controller
    - broker
  storage:
    type: jbod
    volumes:
      - id: 0
        type: persistent-claim
        size: {{ .Values.stream.nodepool.storage }}
        deleteClaim: true
        kraftMetadata: shared
---
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  labels:
{{ include "groundx.renderDefaultLabels" (dict "name" $name "indent" 4 "root" $) }}
  name: {{ $svc | quote }}
  namespace: {{ include "groundx.ns" . | quote }}
  annotations:
    strimzi.io/node-pools: enabled
    strimzi.io/kraft: enabled
spec:
  kafka:
    version: {{ include "groundx.stream.version" . }}
    metadataVersion: {{ include "groundx.stream.metaVersion" . }}
    replicas: {{ .Values.stream.replicas }}
    listeners:
      - name: kafka
        port: {{ include "groundx.stream.port" . }}
        type: internal
        tls: false
    config:
      default.replication.factor: {{ .Values.stream.replicas }}
      offsets.topic.replication.factor: {{ .Values.stream.replicas }}
      transaction.state.log.replication.factor: {{ .Values.stream.replicas }}
      transaction.state.log.min.isr: {{ .Values.stream.replicas }}
      min.insync.replicas: {{ .Values.stream.replicas }}
      log.message.format.version: {{ include "groundx.stream.metaVersion" . }}
      inter.broker.protocol.version: {{ include "groundx.stream.metaVersion" . }}
      unstable.api.versions.enable: "true"
      unstable.feature.versions.enable: "true"
{{- with .Values.stream.resources }}
{{ include "groundx.renderContainerResources" (dict "ctx" . "indent" 4) }}
{{- end }}
    template:
      pod:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                  - key: node
                    operator: In
                    values:
                    - {{ include "groundx.node.value" (dict "name" $svc "root" $) | quote }}
        tolerations:
          - key: "node"
            value: {{ include "groundx.node.value" (dict "name" $svc "root" $) | quote }}
            effect: "NoSchedule"
    storage:
      type: persistent-claim
      size: {{ .Values.stream.storage }}
      deleteClaim: true
  entityOperator:
    topicOperator: {}
    userOperator: {}
{{- end }}
