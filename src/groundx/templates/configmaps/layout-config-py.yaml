{{- $fs := (include "groundx.file.settings" . | fromYaml) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: layout-config-py-map
  namespace: {{ include "groundx.ns" . }}
  labels:
{{ include "groundx.renderDefaultLabels" (dict "name" "" "indent" 4 "root" $) }}
data:
  config.py: |
    env = dict(
        accessKey={{ .Values.file.username | quote }},
        accessSecret={{ .Values.file.password | quote }},
        annotationBase="layout/processed/",
        cacheDir="/app/hf_models_cache",
        callbackAPIKey={{ .Values.admin.apiKey | quote }},
        deviceType={{ .Values.layout.inference.deviceType | default "cpu" | quote }},
        env="prod",
        includeLS=False,
        layoutBroker={{ printf "redis://%s:%v/0" (include "groundx.cache.addr" .) (include "groundx.cache.port" .) | quote }},
        layoutLogger={{ .Values.layout.serviceName | quote }},
        layoutResultBroker={{ printf "redis://%s:%v/0" (include "groundx.cache.addr" .) (include "groundx.cache.port" .) | quote }},
        metricsAddr={{ include "groundx.metrics.cache.addr" . | quote }},
        metricsPort={{ include "groundx.metrics.cache.port" . }},
        minBatchSize={{ .Values.layout.process.batchSize }},
        ocrBase="layout/raw/",
        ocrCredentials="credentials.json",
        ocrProject={{ .Values.layout.ocr.project | quote }},
        ocrType={{ .Values.layout.ocr.type | quote }},
        podMemory={{ .Values.layout.podMemory | default "2Gi" | quote }},
        service={{ .Values.layout.serviceName | quote }},
        uploadBase="layout/processed/",
        uploadBaseURL={{ get $fs "bucketDomain" | quote }},
        uploadBucket={{ get $fs "bucketName" | quote }},
        uploadReplaceURL={{ printf "%s://%s/%s/" (get $fs "bucketScheme") (get $fs "bucketDomain") (get $fs "bucketName") | quote }},
        uploadSSL={{ if eq (printf "%v" (get $fs "bucketSSL")) "true" }}True{{ else }}False{{ end }},
        uploadType={{ .Values.file.serviceType | quote }},
        uploadURL={{ printf "%s://%s/%s/" (get $fs "scheme") (get $fs "baseDomain") (get $fs "bucketName") | quote }},
        validAPIKeys=[{{ .Values.admin.apiKey | quote }}, {{ .Values.admin.username | quote }}],
        workers={{ .Values.layout.inference.workers }},
    )
