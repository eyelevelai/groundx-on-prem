apiVersion: v1
kind: ConfigMap
metadata:
  name: config-yaml-map
  namespace: {{ include "groundx.ns" . }}
  labels:
{{ include "groundx.renderDefaultLabels" (dict "name" "" "indent" 4 "root" $) }}
data:
  config.yaml: |
    _mysql: &mysql
      ro_addr: {{ include "groundx.db.ro" . }}
      rw_addr: {{ include "groundx.db.rw" . }}
      user: {{ .Values.db.serviceUsername }}
      password: {{ .Values.db.servicePassword }}
      database: {{ .Values.db.dbName }}
      maxIdle: {{ include "groundx.db.maxIdle" . }}
      maxOpen: {{ include "groundx.db.maxOpen" . }}

    ai:
      aws:
        search:
          baseURL: {{ include "groundx.search.baseURL" . }}
          index: {{ .Values.search.indexName }}
          languages:
{{- if and (hasKey .Values "languages") (not (empty .Values.languages)) }}
          {{- range $l := .Values.languages }}
            - {{ $l }}
          {{- end }}
{{- else }}
            - en
{{- end }}
          username: {{ .Values.search.username  }}
          password: {{ .Values.search.password }}
      eyelevelSearch:
        apiKey: {{ .Values.admin.apiKey }}
        baseURL: http://{{ .Values.ranker.serviceName }}-api.{{ include "groundx.ns" . }}.svc.cluster.local
      layout:
        client:
          apiKey: {{ .Values.admin.apiKey }}
          baseURL: http://{{ .Values.layout.serviceName }}-api.{{ include "groundx.ns" . }}.svc.cluster.local
          callbackURL: http://{{ include "groundx.layoutWebhook.serviceName" . }}.{{ include "groundx.ns" . }}.svc.cluster.local
      openai:
        apiKey: {{ include "groundx.summary.apiKey" . }}
        baseURL: {{ include "groundx.summary.baseURL" . }}
        defaultKitId: {{ include "groundx.summary.defaultKitID" . }}
      summaryType: {{ include "groundx.summary.serviceName" . }}
      searchIndexes:
        {{ .Values.search.indexName }}:
          languages:
{{- if and (hasKey .Values "languages") (not (empty .Values.languages)) }}
          {{- range $l := .Values.languages }}
            - {{ $l }}
          {{- end }}
{{- else }}
            - en
{{- end }}
{{- if and (hasKey .Values.summaryClient "engines") (not (empty .Values.summaryClient.engines)) }}
    engines:
    {{- range $e := .Values.summaryClient.engines }}
      {{ $e.engineID }}:
        engineID: "{{ $e.engineID }}"
        {{- if $e.apiKey }}
        {{ printf "apiKey: %q" $e.apiKey | nindent 8 }}{{ end }}
        {{- if $e.baseURL }}
        {{ printf "baseURL: %q" $e.baseURL | nindent 8 }}{{ end }}
        {{- if hasKey $e "maxInputTokens" }}
        maxInputTokens: {{ $e.maxInputTokens }}{{ end }}
        {{- if hasKey $e "maxRequests"    }}
        maxRequests: {{ $e.maxRequests }}{{ end }}
        {{- if hasKey $e "maxOutputTokens"      }}
        maxTokens: {{ $e.maxOutputTokens }}{{ end }}
        {{- if hasKey $e "requestLimit"   }}
        requestLimit: {{ $e.requestLimit }}{{ end }}
        {{- if $e.type }}
        {{ printf "type: %q" $e.type | nindent 8 }}{{ end }}
        vision: {{ $e.vision | default true }}
    {{- end }}
{{- end }}

    environment: {{ include "groundx.environment" . }}

    groundxServer:
      baseURL: http://{{ include "groundx.groundx.serviceName" . }}.{{ include "groundx.ns" . }}.svc.cluster.local
      port: {{ include "groundx.groundx.port" . }}
      serviceName: {{ include "groundx.groundx.serviceName" . }}

    init:
      ingestOnly: {{ .Values.ingestOnly | default false }}
      mysql:
        user: {{ .Values.db.privilegedUsername }}
        password: {{ .Values.db.privilegedPassword }}
      search:
        password: {{ .Values.search.privilegedPassword }}
        searchModel: all_access
        username: {{ .Values.search.privilegedUsername }}

    {{- $integration := .Values.integration | default dict }}
    {{- $intSearch := $integration.search | default dict }}

    integrationTests:
      search:
        duration: {{ $intSearch.duration | default 3660 }}
        fileId: {{ $intSearch.fileId | default "ey-mtr6hapxq7d94zigammwir6xz4" }}
        modelId: {{ $intSearch.modelId | default 1 }}

    layoutWebhookServer:
      baseURL: http://{{ include "groundx.layoutWebhook.serviceName" . }}.{{ include "groundx.ns" . }}.svc.cluster.local
      port: {{ include "groundx.layoutWebhook.port" . }}
      serviceName: {{ include "groundx.layoutWebhook.serviceName" . }}

    kafka:
      filePreProcess:
        broker: {{ printf "%s:%v" (include "groundx.stream.domain" .) (include "groundx.stream.port" .) }}
        groupId: {{ printf "%s-%s" (include "groundx.ns" .) (include "groundx.stream.serviceName" .) }}
        topic: {{ include "groundx.preProcess.queue" . }}
      fileProcess:
        broker: {{ printf "%s:%v" (include "groundx.stream.domain" .) (include "groundx.stream.port" .) }}
        groupId: {{ printf "%s-%s" (include "groundx.ns" .) (include "groundx.stream.serviceName" .) }}
        topic: {{ include "groundx.process.queue" . }}
      fileSummaryDev:
        broker: {{ printf "%s:%v" (include "groundx.stream.domain" .) (include "groundx.stream.port" .) }}
        groupId: {{ printf "%s-%s" (include "groundx.ns" .) (include "groundx.stream.serviceName" .) }}
        topic: {{ include "groundx.summaryClient.queue" . }}
      fileSummaryProd:
        broker: {{ printf "%s:%v" (include "groundx.stream.domain" .) (include "groundx.stream.port" .) }}
        groupId: {{ printf "%s-%s" (include "groundx.ns" .) (include "groundx.stream.serviceName" .) }}
        topic: {{ include "groundx.summaryClient.queue" . }}
      fileUpdate:
        broker: {{ printf "%s:%v" (include "groundx.stream.domain" .) (include "groundx.stream.port" .) }}
        groupId: {{ printf "%s-%s" (include "groundx.ns" .) (include "groundx.stream.serviceName" .) }}
        topic: {{ include "groundx.queue.queue" . }}
      fileUpload:
        broker: {{ printf "%s:%v" (include "groundx.stream.domain" .) (include "groundx.stream.port" .) }}
        groupId: {{ printf "%s-%s" (include "groundx.ns" .) (include "groundx.stream.serviceName" .) }}
        topic: {{ include "groundx.upload.queue" . }}

    metrics:
      active: true
      api:
        - name: {{ include "groundx.groundx.serviceName" . }}
        - name: {{ .Values.layout.serviceName }}-api
        - name: {{ include "groundx.layoutWebhook.serviceName" . }}
      document:
        tokensPerMinute: {{ .Values.throughput.tpm.document | default 0 }}
      inference:
        - name: {{ .Values.layout.serviceName }}-inference
          tokensPerMinute: {{ .Values.throughput.services.layout.inference | default 0 }}
        - name: {{ include "groundx.summary.serviceName" . }}-api
          tokensPerMinute: {{ .Values.throughput.services.summary.api | default 0 }}
        - name: {{ include "groundx.summary.serviceName" . }}-inference
          tokensPerMinute: {{ .Values.throughput.services.summary.inference | default 0 }}
        - name: {{ include "groundx.summaryClient.serviceName" . }}
          tokensPerMinute: {{ .Values.throughput.services.summaryClient.api | default 0 }}
      page:
        tokensPerMinute: {{ .Values.throughput.tpm.page | default 0 }}
      queue:
        - name: {{ include "groundx.preProcess.serviceName" . }}
          target: {{ include "groundx.preProcess.queue" . }}
          threshold: {{ .Values.throughput.services.preProcess.queue | default 0 }}
        - name: {{ include "groundx.process.serviceName" . }}
          target: {{ include "groundx.process.queue" . }}
          threshold: {{ .Values.throughput.services.process.queue | default 0 }}
        - name: {{ include "groundx.queue.serviceName" . }}
          target: {{ include "groundx.queue.queue" . }}
          threshold: {{ .Values.throughput.services.queue.queue | default 0 }}
        - name: {{ include "groundx.upload.serviceName" . }}
          target: {{ include "groundx.upload.queue" . }}
          threshold: {{ .Values.throughput.services.upload.queue | default 0 }}
      session:
        addr: {{ printf "%s:%v" (include "groundx.metrics.cache.addr" .) (include "groundx.metrics.cache.port" .) }}
        notCluster: {{ include "groundx.metrics.cache.notCluster" . }}
      summaryRequest:
        tokensPerMinute: {{ .Values.throughput.tpm.summaryRequest | default 0 }}
      task:
        - name: {{ .Values.layout.serviceName }}-correct
          target: {{ .Values.layout.correct.queue }}
          threshold: {{ .Values.throughput.services.layout.correct | default 0 }}
        - name: {{ .Values.layout.serviceName }}-map
          target: {{ .Values.layout.map.queue }}
          threshold: {{ .Values.throughput.services.layout.map | default 0 }}
        - name: {{ .Values.layout.serviceName }}-ocr
          target: {{ .Values.layout.ocr.queue }}
          threshold: {{ .Values.throughput.services.layout.ocr | default 0 }}
        - name: {{ .Values.layout.serviceName }}-process
          target: {{ .Values.layout.process.queue }}
          threshold: {{ .Values.throughput.services.layout.process | default 0 }}
        - name: {{ .Values.layout.serviceName }}-save
          target: {{ .Values.layout.save.queue }}
          threshold: {{ .Values.throughput.services.layout.save | default 0 }}

{{- if .Values.metrics }}
    metricsServer:
      baseURL: http://{{ .Values.metrics.serviceName }}.{{ include "groundx.ns" . }}.svc.cluster.local
      port: {{ .Values.metrics.port | default 0 }}
      serviceName: {{ .Values.metrics.serviceName }}
      sslCACert: /etc/ssl/tls/ca.crt
      sslCert: /etc/ssl/tls/tls.crt
      sslKey: /etc/ssl/tls/tls.key
      sslPort: 8443
{{- end }}

    owner:
      baseURL: http://{{ include "groundx.groundx.serviceName" . }}.{{ include "groundx.ns" . }}.svc.cluster.local/api/v1
      name: on-prem
      type: {{ include "groundx.groundx.type" . }}
      username: {{ .Values.admin.username }}

    preProcessFileServer:
      baseURL: http://{{ include "groundx.preProcess.serviceName" . }}.{{ include "groundx.ns" . }}.svc.cluster.local
      maxConcurrent: {{ include "groundx.preProcess.queueSize" . }}
      port: {{ include "groundx.preProcess.containerPort" . }}
      serviceName: {{ include "groundx.preProcess.serviceName" . }}

    processFileServer:
      baseURL: http://{{ include "groundx.process.serviceName" . }}.{{ include "groundx.ns" . }}.svc.cluster.local
      maxConcurrent: {{ include "groundx.process.queueSize" . }}
      port: {{ include "groundx.process.containerPort" . }}
      serviceName: {{ include "groundx.process.serviceName" . }}

    processors:
      convert: [11]
      layout: [3]
      map: [4]
      saveFile: [2]
      skipConvert: [12]
      skipGenerate: [1]
      skipLayout: [5]
      skipMap: [6]
      skipSummarize: [7]
      summarize: [8]
      summarizeChunks: [10]
      summarizeSections: [9]
{{- if .Values.ingestOnly }}
      extraPostDefaults:
        - processorID: 1
          type: skip-generate
{{- end }}

    queueFileServer:
      baseURL: http://{{ include "groundx.queue.serviceName" . }}.{{ include "groundx.ns" . }}.svc.cluster.local
      maxConcurrent: {{ include "groundx.queue.queueSize" . }}
      pollTime: 1
      port: {{ include "groundx.queue.containerPort" . }}
      serviceName: {{ include "groundx.queue.serviceName" . }}

    rec:
      mysql: *mysql
      session:
        addr: {{ printf "%s:%v" (include "groundx.cache.addr" .) (include "groundx.cache.port" .) }}
        notCluster: {{ include "groundx.cache.notCluster" . }}

{{- if .Values.dashboard }}
    ssp:
      baseURL: http://{{ .Values.dashboard.serviceName }}.{{ include "groundx.ns" . }}.svc.cluster.local
      dashboardURL: http://{{ .Values.dashboard.serviceName }}.{{ include "groundx.ns" . }}.svc.cluster.local
{{- end }}

    summaryServer:
      baseURL: http://{{ include "groundx.summary.serviceName" . }}.{{ include "groundx.ns" . }}.svc.cluster.local
      maxConcurrent: {{ include "groundx.summaryClient.queueSize" . }}
      port: {{ include "groundx.summaryClient.containerPort" . }}
      serviceName: {{ include "groundx.summaryClient.serviceName" . }}

    {{- $fs := (include "groundx.file.settings" . | fromYaml) }}

    upload:
      baseDomain: {{ get $fs "baseDomain" }}
      baseUrl: {{ printf "%s://%s" (get $fs "scheme") (get $fs "baseDomain") }}
      bucket: {{ get $fs "bucketName" }}
      bucketUrl: {{ printf "%s://%s" (get $fs "bucketScheme") (get $fs "bucketDomain") }}
      id: {{ get $fs "username" }}
      secret: {{ get $fs "password" }}
      service: {{ get $fs "serviceType" }}
      ssl: {{ get $fs "ssl" }}

    uploadFileServer:
      baseURL: http://{{ include "groundx.upload.serviceName" . }}.{{ include "groundx.ns" . }}.svc.cluster.local
      maxConcurrent: {{ include "groundx.upload.queueSize" . }}
      port: {{ include "groundx.upload.containerPort" . }}
      serviceName: {{ include "groundx.upload.serviceName" . }}
