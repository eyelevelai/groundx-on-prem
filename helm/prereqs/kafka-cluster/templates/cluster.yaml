apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: {{ .Values.serviceName }}-cluster
  namespace: {{ .Values.namespace }}
  annotations:
    strimzi.io/node-pools: enabled
    strimzi.io/kraft: enabled
spec:
  kafka:
    version: {{ .Values.cluster.version }}
    metadataVersion: {{ .Values.cluster.metaVersion }}
    replicas: {{ .Values.cluster.replicas }}
    listeners:
      - name: kafka
        port: {{ .Values.cluster.port }}
        type: internal
        tls: false
    config:
      default.replication.factor: {{ .Values.cluster.replicas }}
      offsets.topic.replication.factor: {{ .Values.cluster.replicas }}
      transaction.state.log.replication.factor: {{ .Values.cluster.replicas }}
      transaction.state.log.min.isr: {{ .Values.cluster.replicas }}
      min.insync.replicas: {{ .Values.cluster.replicas }}
      group.initial.rebalance.delay.ms: 0
      auto.create.topics.enable: true
      unstable.api.versions.enable: "true"
      unstable.feature.versions.enable: "true"
    template:
      pod:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                  - key: node
                    operator: In
                    values:
                    - "{{ .Values.node }}"
        tolerations:
          - key: "node"
            value: "{{ .Values.node }}"
            effect: "NoSchedule"
    storage:
      type: persistent-claim
      size: {{ .Values.cluster.storage }}
      deleteClaim: true
  entityOperator:
    topicOperator: {}
    userOperator: {}
