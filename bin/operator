#!/usr/bin/env bash

CONCURRENCY=1
MIN_KUBERNETES_VERSION="1.18"

BIN_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
. "$BIN_DIR/shared/util"

must_have terraform
must_have kubectl

ALL=false
GROUP=""
APP=""
INIT=""
SERVICE=""


if [[ "$1" =~ ^- ]]; then
  IN=""
else
  IN=$1
  shift

  if [[ " ${valid_groups[@]} " =~ " $IN " ]]; then
    GROUP=$IN
  elif [[ " ${valid_apps[@]} " =~ " $IN " ]]; then
    APP=$IN
  elif [[ " ${valid_init[@]} " =~ " $IN " ]]; then
    INIT=$IN
  elif [[ " ${valid_services[@]} " =~ " $IN " ]]; then
    SERVICE=$IN
  elif [[ $IN == "" ]]; then
    ALL=true
  else
    echo "Unknown request type: [\"$IN\"]"
    exit 1
  fi
fi

CLEAR=0
DEV=0
TFLAG=0

while getopts ":cdt" opt; do
  case $opt in
    c)
      CLEAR=1
      ;;
    d)
      DEV=1
      ;;
    t)
      TFLAG=1
      ;;
    \?)
      echo "Invalid option: -$OPTARG"
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument."
      exit 1
      ;;
  esac
done

if [[ "$DEV" -eq 1 ]]; then
  echo "Setting dev"
  export TF_VAR_DEV=1
fi

destroy() {
  local dir="$1"

  if [[ -d "$dir" ]]; then
    echo "Destroying $dir"
    if [[ "$TFLAG" -eq 1 ]]; then
      terraform -chdir="$dir" destroy
    else
      terraform -chdir="$dir" destroy --auto-approve
      for app in "${inference_apps[@]}"; do
        if [[ "$dir" == */"$app" ]]; then
          helm delete -n eyelevel $app-api > /dev/null 2>&1
          helm delete -n eyelevel $app-inference > /dev/null 2>&1
          return 0
        fi
      done
      for app in "${inference_process_apps[@]}"; do
        if [[ "$dir" == */"$app" ]]; then
          helm delete -n eyelevel $app-api > /dev/null 2>&1
          helm delete -n eyelevel $app-inference > /dev/null 2>&1
          helm delete -n eyelevel $app-map > /dev/null 2>&1
          helm delete -n eyelevel $app-process > /dev/null 2>&1
          helm delete -n eyelevel $app-ocr > /dev/null 2>&1
          helm delete -n eyelevel $app-save > /dev/null 2>&1
          return 0
        fi
      done
      for app in "${golang_apps[@]}"; do
        if [[ "$dir" == */"$app" ]]; then
          helm delete -n eyelevel $app > /dev/null 2>&1
          return 0
        fi
      done
    fi
  else
    echo "Error: Directory '$dir' does not exist."
    exit 1
  fi
}

do=deploy
if [[ "$CLEAR" -eq 1 ]]; then
  do=destroy
  reversed_groups=()

  for (( idx=${#valid_groups[@]}-1 ; idx>=0 ; idx-- )) ; do
      reversed_groups+=("${valid_groups[$idx]}")
  done

  valid_groups=("${reversed_groups[@]}")
fi

if [[ -n "$GROUP" ]]; then
  if [[ " ${valid_groups[@]} " =~ " $GROUP " ]]; then
    if [[ " ${recursive_types[@]} " =~ " $GROUP " ]]; then
      if [[ "$GROUP" == "init" ]]; then
        recurse_group $do "$BIN_DIR/../operator/$GROUP" $CONCURRENCY "${valid_init[@]}"
      elif [[ "$GROUP" == "services" ]]; then
        recurse_group $do "$BIN_DIR/../operator/$GROUP" $CONCURRENCY "${valid_services[@]}"
      elif [[ "$GROUP" == "app" ]]; then
        recurse_group $do "$BIN_DIR/../operator/$GROUP" $CONCURRENCY "${valid_apps[@]}"
      else
        recurse_directories $do "$BIN_DIR/../operator/$GROUP" $CONCURRENCY
      fi
    else
      $do "$BIN_DIR/../operator/$GROUP"
    fi
  else
    echo "Unknown request type: $GROUP"
    exit 1
  fi
elif [[ -n "$APP" ]]; then
  $do "$BIN_DIR/../operator/app/$APP"
elif [[ -n "$INIT" ]]; then
  $do "$BIN_DIR/../operator/init/$INIT"
elif [[ -n "$SERVICE" ]]; then
  $do "$BIN_DIR/../operator/services/$SERVICE"
else
  for dir in "${valid_groups[@]}"; do
    if [[ " ${recursive_types[@]} " =~ " $dir " ]]; then
      if [[ "$dir" == "init" ]]; then
        recurse_group $do "$BIN_DIR/../operator/$dir" $CONCURRENCY "${valid_init[@]}"
      elif [[ "$dir" == "services" ]]; then
        recurse_group $do "$BIN_DIR/../operator/$dir" $CONCURRENCY "${valid_services[@]}"
      elif [[ "$dir" == "app" ]]; then
        recurse_group $do "$BIN_DIR/../operator/$dir" $CONCURRENCY "${valid_apps[@]}"
      else
        recurse_directories $do "$BIN_DIR/../operator/$dir" $CONCURRENCY
      fi
    else
      $do "$BIN_DIR/../operator/$dir"
    fi
  done
fi